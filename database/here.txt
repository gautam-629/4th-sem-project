// first come fist solve cpu scheduling

#include <stdio.h>
#define max 30
void main()
{
    int i, j, n, t, p[max], bt[max], wt[max], tat[max];
    float awt = 0, atat = 0;
    printf("Enter the number of process");
    scanf("%d", &n);
    
    printf("Enter the burst time of the process");
    for (i = 0; i < n; i++)
    {
        scanf("%d", &bt[i]);
    }
   
printf("process\t burst time\t waiting time\t turn around time\n");
    for(i=0;i<n;i++){
        wt[i]=0;
        tat[i]=0;
        for(j=0;j<i;j++){
            wt[i]=wt[i]+bt[j];
        }
        tat[i]=wt[i]+bt[i];
        awt=awt+wt[i];
        atat=atat + tat[i];
printf("%d\t\t%d\t\t%d\t\t%d\n",i+1,bt[i],wt[i],tat[i]);
    }
    awt=awt/n;
    atat=atat/n;
    printf("\nAverage Waiting time=%f\n",awt);
    printf("\nAverage Turn around time=%f\n",atat);
}


//fcfs disk scheduling

#include<stdio.h>
#include<stdlib.h>
int main()
{
    int RQ[100],i,n,TotalHeadMoment=0,initial;
    printf("Enter the number of Requests\n");
    scanf("%d",&n);
    printf("Enter the Requests sequence\n");
    for(i=0;i<n;i++)
     scanf("%d",&RQ[i]);
    printf("Enter initial head position\n");
    scanf("%d",&initial);
    
    // logic for FCFS disk scheduling
    
    for(i=0;i<n;i++)
    {
        TotalHeadMoment=TotalHeadMoment+abs(RQ[i]-initial);
        initial=RQ[i];
    }
    
    printf("Total head moment is %d",TotalHeadMoment);
    return 0;
    
}

//Sjf cpu scheduling
#include <stdio.h>
#define max 30
void main()
{
    int i, j, n, t, p[max], bt[max], wt[max], tat[max];
    float awt = 0, atat = 0;
    printf("Enter the number of process");
    scanf("%d", &n);
    printf("Enter the process number\n");
    for (i = 0; i < n; i++)
    {
        scanf("%d",&p[i]);
    }
    printf("Enter the burst time of the process\n");
    for (i = 0; i < n; i++)
    {
        scanf("%d", &bt[i]);
    }
    // applying bubble sort technique to sort according to theri burst time
    for (i = 0; i < n; i++)
    {
        for (j = i + 1; j < n; j++)
        {
            if (bt[i] > bt[j])
            {
                t = bt[i];
                bt[i] = bt[j];
                bt[j] = t;

                 t = p[i];
                p[i] = p[j];
                p[j] = t;
            }
        }
    }
printf("process\t burst time\t waiting time\turn around time\n");
    for(i=0;i<n;i++){
        wt[i]=0;
        tat[i]=0;
        for(j=0;j<i;j++){
            wt[i]=wt[i]+bt[j];
        }
        tat[i]=wt[i]+bt[i];
        awt=awt+wt[i];
        atat=atat + tat[i];
         printf("%d\t\t%d\t\t%d\t\t%d\n",i+1,bt[i],wt[i],tat[i]);
    }
    awt=awt/n;
    atat=atat/n;
    printf("Average Waiting time=%f\n",awt);
    printf("Average Turn around time=%f\n",atat);
}


// fifo

#include <stdio.h>
int main()
{
    int i, j, n, a[50], frame[10], no, k, avail, count = 0;
    printf("\n ENTER THE NUMBER OF PAGES:\n");
    scanf("%d", &n);
    printf("\n ENTER THE PAGE NUMBER :\n");
    for (i = 1; i <= n; i++)
        scanf("%d", &a[i]);
    printf("\n ENTER THE NUMBER OF FRAMES :");
    scanf("%d", &no);
    for (i = 0; i < no; i++){
        frame[i] = -1;
    }
    j = 0;
    printf("\tref string\t page frames\n");
    for (i = 1; i <= n; i++)
    {
        printf("%d\t\t", a[i]);
        avail = 0;
        for (k = 0; k < no; k++)
            if (frame[k] == a[i])
                avail = 1;
        if (avail == 0)
        {
            frame[j] = a[i];
            j = (j + 1) % no;
            count++;
            for (k = 0; k < no; k++)
                printf("%d\t", frame[k]);
        }
        printf("\n");
    }
    printf("Page Fault Is %d", count);
    return 0;
}
